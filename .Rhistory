} !#',
fills = fills,
data = gov_map1[[1]],
legend = TRUE,
labels = TRUE
)
d1$save('governance.html', cdn = TRUE)
d1$addAssets(
jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
)
d1$setTemplate(chartDiv = "
<div id = 'chart_1' class = 'rChart datamaps'>
<input id='slider' type='range' min=2012 max=2014 ng-model='year' width=200>
<span ng-bind='year'></span>
<script>
function rChartsCtrl($scope){
$scope.year = '2012';
$scope.$watch('year', function(newYear){
mapchart_1.updateChoropleth(chartParams.newData[newYear]);
})
}
</script>
</div>   "
)
d1$set(newData = gov_map)
d1$save("governance.html", cdn = TRUE, standalone=TRUE)
str(gov_all)
str(gov_final)
d1 <- ichoropleth(gov_score~gov_parameter, data = gov_all, ncuts = 5, pal = "RdYlBu",
animate = 'year', map= "states1", legend = TRUE, labels = TRUE)
d1$set(
geographyConfig = list(
dataUrl = "ccy.json",
popupTemplate =  "#! function(geography, data) { //this function should just return a string
return '<div class=hoverinfo><strong>' + geography.properties.name + '</strong></div>';
}  !#"
),
dom='chart_1',
scope = 'states1',
labels=TRUE,
bodyattrs = "ng-app ng-controller=rChartsCtrl",
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.center([38, 1.3]) //centers the map on the conservancies
.scale(9000) // makes it larger
.translate([element.offsetWidth / 2, element.offsetHeight / 2]);
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#'
)
d1$save('governance.html', cdn = TRUE)
d1 <- ichoropleth(gov_score~gov_parameter, data = gov_map, ncuts = 5, pal = "RdYlBu",
animate = 'year', map= "states1", legend = TRUE, labels = TRUE)
d1$set(
geographyConfig = list(
dataUrl = "ccy.json",
popupTemplate =  "#! function(geography, data) { //this function should just return a string
return '<div class=hoverinfo><strong>' + geography.properties.name + '</strong></div>';
}  !#"
),
dom='chart_1',
scope = 'states1',
labels=TRUE,
bodyattrs = "ng-app ng-controller=rChartsCtrl",
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.center([38, 1.3]) //centers the map on the conservancies
.scale(9000) // makes it larger
.translate([element.offsetWidth / 2, element.offsetHeight / 2]);
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#'
)
d1$save('governance.html', cdn = TRUE)
d1 <- Datamaps$new()
d1$set(
geographyConfig = list(
dataUrl = "ccy.json",
popupTemplate =  "#! function(geography, data) { //this function should just return a string
return '<div class=hoverinfo><strong>' + geography.properties.name + '</strong></div>';
}  !#"
),
dom='chart_1',
scope = 'states1',
labels=TRUE,
bodyattrs = "ng-app ng-controller=rChartsCtrl",
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.center([38, 1.3]) //centers the map on the conservancies
.scale(9000) // makes it larger
.translate([element.offsetWidth / 2, element.offsetHeight / 2]);
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#',
fills = fills,
data = gov_map1[[1]],
legend = TRUE,
labels = TRUE
)
d1$save('governance.html', cdn = TRUE)
d1$addAssets(
jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
)
d1$setTemplate(chartDiv = "
<div id = 'chart_1' class = 'rChart datamaps'>
<input id='slider' type='range' min=2012 max=2014 ng-model='year' width=200>
<span ng-bind='year'></span>
<script>
function rChartsCtrl($scope){
$scope.year = '2012';
$scope.$watch('year', function(newYear){
mapchart_1.updateChoropleth(chartParams.newData[newYear]);
})
}
</script>
</div>   "
)
d1$set(newData = gov_map)
d1$save("governance.html", cdn = TRUE, standalone=TRUE)
d1$set(
geographyConfig = list(
dataUrl = "ccy.json",
popupTemplate =  "#! function(geography, data) { //this function should just return a string
return '<div class=hoverinfo><strong>' + geography.properties.name + '</strong></div>';
}  !#"
),
dom='chart_1',
scope = 'states1',
labels=TRUE,
bodyattrs = "ng-app ng-controller=rChartsCtrl",
d1$addAssets(
jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
)
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.center([38, 1.3]) //centers the map on the conservancies
.scale(9000) // makes it larger
.translate([element.offsetWidth / 2, element.offsetHeight / 2]);
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#',
fills = fills,
data = gov_map1[[1]],
legend = TRUE,
labels = TRUE
)
d1$save('governance.html', cdn = TRUE)
d1$addAssets(
jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
)
d1$setTemplate(chartDiv = "
<div class='container'>
<input id='slider' type='range' min=2012 max=2014 ng-model='year' width=200>
<span ng-bind='year'></span>
<div id = '' class = 'rChart datamaps'>
<script>
function rChartsCtrl($scope){
$scope.year = '2012';
$scope.$watch('year', function(newYear){
mapchart_1.updateChoropleth(chartParams.newData[newYear]);
})
}
</script>
</div>   "
)
#d1$set(newData = gov_map1)
d1$save("governance.html", cdn = TRUE, standalone=TRUE)
d1$set(
geographyConfig = list(
dataUrl = "ccy.json",
popupTemplate =  "#! function(geography, data) { //this function should just return a string
return '<div class=hoverinfo><strong>' + geography.properties.name + '</strong></div>';
}  !#"
),
dom='chart_1',
scope = 'states1',
labels=TRUE,
bodyattrs = "ng-app ng-controller=rChartsCtrl",
d1$addAssets(
jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
),
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.center([38, 1.3]) //centers the map on the conservancies
.scale(9000) // makes it larger
.translate([element.offsetWidth / 2, element.offsetHeight / 2]);
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#',
fills = fills,
data = gov_map1[[1]],
legend = TRUE,
labels = TRUE
)
#d1$save('governance.html', cdn = TRUE)
#d1$addAssets(
#  jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
#)
d1$setTemplate(chartDiv = "
<div class='container'>
<input id='slider' type='range' min=2012 max=2014 ng-model='year' width=200>
<span ng-bind='year'></span>
<div id = '' class = 'rChart datamaps'>
<script>
function rChartsCtrl($scope){
$scope.year = '2012';
$scope.$watch('year', function(newYear){
mapchart_1.updateChoropleth(chartParams.newData[newYear]);
})
}
</script>
</div>   "
)
#d1$set(newData = gov_map1)
d1$save("governance.html", cdn = TRUE, standalone=TRUE)
d1 <- Datamaps$new()
d1$set(
geographyConfig = list(
dataUrl = "ccy.json",
popupTemplate =  "#! function(geography, data) { //this function should just return a string
return '<div class=hoverinfo><strong>' + geography.properties.name + '</strong></div>';
}  !#"
),
dom='chart_1',
scope = 'states1',
labels=TRUE,
bodyattrs = "ng-app ng-controller=rChartsCtrl",
d1$addAssets(
jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
),
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.center([38, 1.3]) //centers the map on the conservancies
.scale(9000) // makes it larger
.translate([element.offsetWidth / 2, element.offsetHeight / 2]);
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#',
fills = fills,
data = gov_map1[[1]],
legend = TRUE,
labels = TRUE
)
#d1$save('governance.html', cdn = TRUE)
#d1$addAssets(
#  jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
#)
d1$setTemplate(chartDiv = "
<div class='container'>
<input id='slider' type='range' min=2012 max=2014 ng-model='year' width=200>
<span ng-bind='year'></span>
<div id = '' class = 'rChart datamaps'>
<script>
function rChartsCtrl($scope){
$scope.year = '2012';
$scope.$watch('year', function(newYear){
mapchart_1.updateChoropleth(chartParams.newData[newYear]);
})
}
</script>
</div>   "
)
d1$set(newData = gov_map1)
d1$save("governance.html", cdn = TRUE, standalone=TRUE)
d1 <- Datamaps$new()
d1$set(
geographyConfig = list(
dataUrl = "ccy.json",
popupTemplate =  "#! function(geography, data) { //this function should just return a string
return '<div class=hoverinfo><strong>' + geography.properties.name + '</strong></div>';
}  !#"
),
dom='chart_1',
scope = 'states1',
labels=TRUE,
bodyattrs = "ng-app ng-controller=rChartsCtrl",
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.center([38, 1.3]) //centers the map on the conservancies
.scale(9000) // makes it larger
.translate([element.offsetWidth / 2, element.offsetHeight / 2]);
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#',
fills = fills,
data = gov_map1[[1]],
legend = TRUE,
labels = TRUE
)
#d1$save('governance.html', cdn = TRUE)
d1$addAssets(
jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
)
d1$setTemplate(chartDiv = "
<div class='container'>
<input id='slider' type='range' min=2012 max=2014 ng-model='year' width=200>
<span ng-bind='year'></span>
<div id = '' class = 'rChart datamaps'>
<script>
function rChartsCtrl($scope){
$scope.year = '2012';
$scope.$watch('year', function(newYear){
mapchart_1.updateChoropleth(chartParams.newData[newYear]);
})
}
</script>
</div>   "
)
d1$set(newData = gov_map1)
d1$save("governance.html", cdn = TRUE, standalone=TRUE)
d1 <- Datamaps$new()
d1$set(
geographyConfig = list(
dataUrl = "ccy.json",
popupTemplate =  "#! function(geography, data) { //this function should just return a string
return '<div class=hoverinfo><strong>' + geography.properties.name + '</strong></div>';
}  !#"
),
dom='chart_1',
scope = 'states1',
labels=TRUE,
bodyattrs = "ng-app ng-controller=rChartsCtrl",
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.center([38, 1.3]) //centers the map on the conservancies
.scale(9000) // makes it larger
.translate([element.offsetWidth / 2, element.offsetHeight / 2]);
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#',
fills = fills,
data = gov_map1[[1]],
legend = TRUE,
labels = TRUE
)
d1$save('governance.html', cdn = TRUE)
d1$addAssets(
jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
)
d1$setTemplate(chartDiv = "
<div class='container'>
<input id='slider' type='range' min=2012 max=2014 ng-model='year' width=200>
<span ng-bind='year'></span>
<div id = '' class = 'rChart datamaps'>
<script>
function rChartsCtrl($scope){
$scope.year = '2012';
$scope.$watch('year', function(newYear){
mapchart_1.updateChoropleth(chartParams.newData[newYear]);
})
}
</script>
</div>   "
)
d1$save("governance.html", cdn = TRUE, standalone=TRUE)
d1$set(newData = gov_map1)
d1$save("governance.html", cdn = TRUE, standalone=TRUE)
d1$set(
geographyConfig = list(
dataUrl = "ccy.json",
popupTemplate =  "#! function(geography, data) { //this function should just return a string
return '<div class=hoverinfo><strong>' + geography.properties.name + '</strong></div>';
}  !#"
),
#dom='chart_1',
scope = 'states1',
labels=TRUE,
bodyattrs = "ng-app ng-controller=rChartsCtrl",
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.center([38, 1.3]) //centers the map on the conservancies
.scale(9000) // makes it larger
.translate([element.offsetWidth / 2, element.offsetHeight / 2]);
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#',
fills = fills,
data = gov_map1[[1]],
legend = TRUE,
labels = TRUE
)
d1$save('governance.html', cdn = TRUE)
d1$addAssets(
jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
)
d1$setTemplate(chartDiv = "
<div class='container'>
<input id='slider' type='range' min=2012 max=2014 ng-model='year' width=200>
<span ng-bind='year'></span>
<div id = '' class = 'rChart datamaps'>
<script>
function rChartsCtrl($scope){
$scope.year = '2012';
$scope.$watch('year', function(newYear){
mapchart_1.updateChoropleth(chartParams.newData[newYear]);
})
}
</script>
</div>   "
)
d1$set(newData = gov_map1)
d1$save("governance.html", cdn = TRUE, standalone=TRUE)
d1$setTemplate(chartDiv = "
<div class='container'>
<input id='slider' type='range' min=2012 max=2014 ng-model='year' width=200>
<span ng-bind='year'></span>
<div id = 'chart_1' class = 'rChart datamaps'>
<script>
function rChartsCtrl($scope){
$scope.year = '2012';
$scope.$watch('year', function(newYear){
mapchart_1.updateChoropleth(chartParams.newData[newYear]);
})
}
</script>
</div>   "
)
d1$set(newData = gov_map1)
d1$save("governance.html", cdn = TRUE, standalone=TRUE)
d1 <- Datamaps$new()
d1$set(
geographyConfig = list(
dataUrl = "ccy.json",
popupTemplate =  "#! function(geography, data) { //this function should just return a string
return '<div class=hoverinfo><strong>' + geography.properties.name + '</strong></div>';
}  !#"
),
dom='chart_1',
scope = 'states1',
labels=TRUE,
bodyattrs = "ng-app ng-controller=rChartsCtrl",
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.center([38, 1.3]) //centers the map on the conservancies
.scale(10000) // makes it larger
.translate([element.offsetWidth / 2, element.offsetHeight / 2]);
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#',
fills = fills,
data = gov_map1[[1]],
legend = TRUE,
labels = TRUE
)
d1$save('governance.html', cdn = TRUE)
d1$addAssets(
jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
)
d1$setTemplate(chartDiv = "
<div class='container'>
<input id='slider' type='range' min=2012 max=2014 ng-model='year' width=200>
<span ng-bind='year'></span>
<div id = 'chart_1' class = 'rChart datamaps'>
<script>
function rChartsCtrl($scope){
$scope.year = '2012';
$scope.$watch('year', function(newYear){
mapchart_1.updateChoropleth(chartParams.newData[newYear]);
})
}
</script>
</div>   "
)
d1$set(newData = gov_map1)
d1$save("governance.html", cdn = TRUE, standalone=TRUE)
setwd("~/Documents/NRT/scomms/Github/governance_ppt")
#setwd("~/")
library(slidify)
library(slidifyLibraries)
library(knitr)
library(shiny)
library(rCharts)
author("slides") ### to launch the presentation
#slidify('index.Rmd') ###to convert to slides if knit button doesn't work
runDeck()
runDeck() ### we need to run this because we're using a shiny application
runDeck() ### we need to run this because we're using a shiny application
runDeck() ### we need to run this because we're using a shiny application
runDeck() ### we need to run this because we're using a shiny application
runDeck() ### we need to run this because we're using a shiny application
runDeck() ### we need to run this because we're using a shiny application
runDeck() ### we need to run this because we're using a shiny application
runDeck() ### we need to run this because we're using a shiny application
runDeck() ### we need to run this because we're using a shiny application
runDeck() ### we need to run this because we're using a shiny application
runDeck() ### we need to run this because we're using a shiny application
runDeck() ### we need to run this because we're using a shiny application
runDeck() ### we need to run this because we're using a shiny application
runDeck() ### we need to run this because we're using a shiny application
runDeck() ### we need to run this because we're using a shiny application
runDeck() ### we need to run this because we're using a shiny application
runDeck() ### we need to run this because we're using a shiny application
<iframe src="https://dgohil.shinyapps.io/app2/", height=600></iframe>
runDeck() ### we need to run this because we're using a shiny application
runDeck() ### we need to run this because we're using a shiny application
runDeck() ### we need to run this because we're using a shiny application
runDeck() ### we need to run this because we're using a shiny application
runDeck() ### we need to run this because we're using a shiny application
publish_dropbox(slides)
publish_dropbox(slides)
publish_dropbox("slides","governance")
publish(governance, host="dropbox")
