d1$setTemplate(chartDiv = "
<div id = 'chart_1' class = 'rChart datamaps'>
<input id='slider' type='range' min=2012 max=2014 ng-model='year' width=200>
<span ng-bind='year'></span>
<script>
function rChartsCtrl($scope){
$scope.year = '2012';
$scope.$watch('year', function(newYear){
mapchart_1.updateChoropleth(chartParams.newData[newYear]);
})
}
</script>
</div>   "
)
d1$set(newData = gov_map)
d1$save("governance.html", cdn = TRUE, standalone=TRUE)
d1$set(
geographyConfig = list(
dataUrl = "ccy.json",
popupTemplate =  "#! function(geography, data) { //this function should just return a string
return '<div class=hoverinfo><strong>' + geography.properties.name + '</strong></div>';
}  !#"
),
dom='chart_1',
scope = 'states1',
labels=TRUE,
bodyattrs = "ng-app ng-controller=rChartsCtrl",
d1$addAssets(
jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
)
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.center([38, 1.3]) //centers the map on the conservancies
.scale(9000) // makes it larger
.translate([element.offsetWidth / 2, element.offsetHeight / 2]);
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#',
fills = fills,
data = gov_map1[[1]],
legend = TRUE,
labels = TRUE
)
d1$save('governance.html', cdn = TRUE)
d1$addAssets(
jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
)
d1$setTemplate(chartDiv = "
<div class='container'>
<input id='slider' type='range' min=2012 max=2014 ng-model='year' width=200>
<span ng-bind='year'></span>
<div id = '' class = 'rChart datamaps'>
<script>
function rChartsCtrl($scope){
$scope.year = '2012';
$scope.$watch('year', function(newYear){
mapchart_1.updateChoropleth(chartParams.newData[newYear]);
})
}
</script>
</div>   "
)
#d1$set(newData = gov_map1)
d1$save("governance.html", cdn = TRUE, standalone=TRUE)
d1$set(
geographyConfig = list(
dataUrl = "ccy.json",
popupTemplate =  "#! function(geography, data) { //this function should just return a string
return '<div class=hoverinfo><strong>' + geography.properties.name + '</strong></div>';
}  !#"
),
dom='chart_1',
scope = 'states1',
labels=TRUE,
bodyattrs = "ng-app ng-controller=rChartsCtrl",
d1$addAssets(
jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
),
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.center([38, 1.3]) //centers the map on the conservancies
.scale(9000) // makes it larger
.translate([element.offsetWidth / 2, element.offsetHeight / 2]);
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#',
fills = fills,
data = gov_map1[[1]],
legend = TRUE,
labels = TRUE
)
#d1$save('governance.html', cdn = TRUE)
#d1$addAssets(
#  jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
#)
d1$setTemplate(chartDiv = "
<div class='container'>
<input id='slider' type='range' min=2012 max=2014 ng-model='year' width=200>
<span ng-bind='year'></span>
<div id = '' class = 'rChart datamaps'>
<script>
function rChartsCtrl($scope){
$scope.year = '2012';
$scope.$watch('year', function(newYear){
mapchart_1.updateChoropleth(chartParams.newData[newYear]);
})
}
</script>
</div>   "
)
#d1$set(newData = gov_map1)
d1$save("governance.html", cdn = TRUE, standalone=TRUE)
d1 <- Datamaps$new()
d1$set(
geographyConfig = list(
dataUrl = "ccy.json",
popupTemplate =  "#! function(geography, data) { //this function should just return a string
return '<div class=hoverinfo><strong>' + geography.properties.name + '</strong></div>';
}  !#"
),
dom='chart_1',
scope = 'states1',
labels=TRUE,
bodyattrs = "ng-app ng-controller=rChartsCtrl",
d1$addAssets(
jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
),
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.center([38, 1.3]) //centers the map on the conservancies
.scale(9000) // makes it larger
.translate([element.offsetWidth / 2, element.offsetHeight / 2]);
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#',
fills = fills,
data = gov_map1[[1]],
legend = TRUE,
labels = TRUE
)
#d1$save('governance.html', cdn = TRUE)
#d1$addAssets(
#  jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
#)
d1$setTemplate(chartDiv = "
<div class='container'>
<input id='slider' type='range' min=2012 max=2014 ng-model='year' width=200>
<span ng-bind='year'></span>
<div id = '' class = 'rChart datamaps'>
<script>
function rChartsCtrl($scope){
$scope.year = '2012';
$scope.$watch('year', function(newYear){
mapchart_1.updateChoropleth(chartParams.newData[newYear]);
})
}
</script>
</div>   "
)
d1$set(newData = gov_map1)
d1$save("governance.html", cdn = TRUE, standalone=TRUE)
d1 <- Datamaps$new()
d1$set(
geographyConfig = list(
dataUrl = "ccy.json",
popupTemplate =  "#! function(geography, data) { //this function should just return a string
return '<div class=hoverinfo><strong>' + geography.properties.name + '</strong></div>';
}  !#"
),
dom='chart_1',
scope = 'states1',
labels=TRUE,
bodyattrs = "ng-app ng-controller=rChartsCtrl",
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.center([38, 1.3]) //centers the map on the conservancies
.scale(9000) // makes it larger
.translate([element.offsetWidth / 2, element.offsetHeight / 2]);
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#',
fills = fills,
data = gov_map1[[1]],
legend = TRUE,
labels = TRUE
)
#d1$save('governance.html', cdn = TRUE)
d1$addAssets(
jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
)
d1$setTemplate(chartDiv = "
<div class='container'>
<input id='slider' type='range' min=2012 max=2014 ng-model='year' width=200>
<span ng-bind='year'></span>
<div id = '' class = 'rChart datamaps'>
<script>
function rChartsCtrl($scope){
$scope.year = '2012';
$scope.$watch('year', function(newYear){
mapchart_1.updateChoropleth(chartParams.newData[newYear]);
})
}
</script>
</div>   "
)
d1$set(newData = gov_map1)
d1$save("governance.html", cdn = TRUE, standalone=TRUE)
d1 <- Datamaps$new()
d1$set(
geographyConfig = list(
dataUrl = "ccy.json",
popupTemplate =  "#! function(geography, data) { //this function should just return a string
return '<div class=hoverinfo><strong>' + geography.properties.name + '</strong></div>';
}  !#"
),
dom='chart_1',
scope = 'states1',
labels=TRUE,
bodyattrs = "ng-app ng-controller=rChartsCtrl",
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.center([38, 1.3]) //centers the map on the conservancies
.scale(9000) // makes it larger
.translate([element.offsetWidth / 2, element.offsetHeight / 2]);
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#',
fills = fills,
data = gov_map1[[1]],
legend = TRUE,
labels = TRUE
)
d1$save('governance.html', cdn = TRUE)
d1$addAssets(
jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
)
d1$setTemplate(chartDiv = "
<div class='container'>
<input id='slider' type='range' min=2012 max=2014 ng-model='year' width=200>
<span ng-bind='year'></span>
<div id = '' class = 'rChart datamaps'>
<script>
function rChartsCtrl($scope){
$scope.year = '2012';
$scope.$watch('year', function(newYear){
mapchart_1.updateChoropleth(chartParams.newData[newYear]);
})
}
</script>
</div>   "
)
d1$save("governance.html", cdn = TRUE, standalone=TRUE)
d1$set(newData = gov_map1)
d1$save("governance.html", cdn = TRUE, standalone=TRUE)
d1$set(
geographyConfig = list(
dataUrl = "ccy.json",
popupTemplate =  "#! function(geography, data) { //this function should just return a string
return '<div class=hoverinfo><strong>' + geography.properties.name + '</strong></div>';
}  !#"
),
#dom='chart_1',
scope = 'states1',
labels=TRUE,
bodyattrs = "ng-app ng-controller=rChartsCtrl",
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.center([38, 1.3]) //centers the map on the conservancies
.scale(9000) // makes it larger
.translate([element.offsetWidth / 2, element.offsetHeight / 2]);
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#',
fills = fills,
data = gov_map1[[1]],
legend = TRUE,
labels = TRUE
)
d1$save('governance.html', cdn = TRUE)
d1$addAssets(
jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
)
d1$setTemplate(chartDiv = "
<div class='container'>
<input id='slider' type='range' min=2012 max=2014 ng-model='year' width=200>
<span ng-bind='year'></span>
<div id = '' class = 'rChart datamaps'>
<script>
function rChartsCtrl($scope){
$scope.year = '2012';
$scope.$watch('year', function(newYear){
mapchart_1.updateChoropleth(chartParams.newData[newYear]);
})
}
</script>
</div>   "
)
d1$set(newData = gov_map1)
d1$save("governance.html", cdn = TRUE, standalone=TRUE)
d1$setTemplate(chartDiv = "
<div class='container'>
<input id='slider' type='range' min=2012 max=2014 ng-model='year' width=200>
<span ng-bind='year'></span>
<div id = 'chart_1' class = 'rChart datamaps'>
<script>
function rChartsCtrl($scope){
$scope.year = '2012';
$scope.$watch('year', function(newYear){
mapchart_1.updateChoropleth(chartParams.newData[newYear]);
})
}
</script>
</div>   "
)
d1$set(newData = gov_map1)
d1$save("governance.html", cdn = TRUE, standalone=TRUE)
d1 <- Datamaps$new()
d1$set(
geographyConfig = list(
dataUrl = "ccy.json",
popupTemplate =  "#! function(geography, data) { //this function should just return a string
return '<div class=hoverinfo><strong>' + geography.properties.name + '</strong></div>';
}  !#"
),
dom='chart_1',
scope = 'states1',
labels=TRUE,
bodyattrs = "ng-app ng-controller=rChartsCtrl",
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.center([38, 1.3]) //centers the map on the conservancies
.scale(10000) // makes it larger
.translate([element.offsetWidth / 2, element.offsetHeight / 2]);
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#',
fills = fills,
data = gov_map1[[1]],
legend = TRUE,
labels = TRUE
)
d1$save('governance.html', cdn = TRUE)
d1$addAssets(
jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
)
d1$setTemplate(chartDiv = "
<div class='container'>
<input id='slider' type='range' min=2012 max=2014 ng-model='year' width=200>
<span ng-bind='year'></span>
<div id = 'chart_1' class = 'rChart datamaps'>
<script>
function rChartsCtrl($scope){
$scope.year = '2012';
$scope.$watch('year', function(newYear){
mapchart_1.updateChoropleth(chartParams.newData[newYear]);
})
}
</script>
</div>   "
)
d1$set(newData = gov_map1)
d1$save("governance.html", cdn = TRUE, standalone=TRUE)
runApp("/Users/dgohil/app2")
library(shinyapps)
runApp("/Users/dgohil/app2")
library(shinyapps)
runApp("/Users/dgohil/app2")
shinyapps::runApp("/Users/dgohil/app2")
library(shiny)
runApp("/Users/dgohil/app2")
shiny::runApp('Documents/NRT/scomms/Github/governance_ppt/app2')
runApp("/Users/dgohil/app2")
gov11 <- loadWorkbook("~/Documents/NRT/scomms/Github/governance_ppt/data/final_gov.xlsx")
gov11 <- loadWorkbook("~/Documents/NRT/scomms/Github/governance_ppt/data/final_gov1.xlsx")
gov11 <- loadWorkbook("~/Documents/NRT/scomms/Github/governance_ppt/app2/data/final_gov1.xlsx")
gov11 <- loadWorkbook("~/Documents/NRT/scomms/Github/governance_ppt/app2/data/final_gov.xlsx")
setwd("~/Documents/NRT/scomms/Github/governance_ppt")
runApp("~/app2")
runApp("~/Documents/NRT/scomms/Github/governance_ppt/app2")
output$mychart <- renderChart({
gov8 <- as.data.frame(gov9)
n1 <- nPlot(gov_score ~ conservancy, group = "gov_parameter", type = 'multiBarChart',
data = (subset(gov8, year==input$year)),
bounds = list( x = 200, y = 100, width = 750, height = 450),
tooltip="function(item){return item.conservancy +'\n' + item.year + '\n' + item.percentage}")
n1$set(dom = "mychart")
n1$chart(reduceXTicks = FALSE)
#n1$xAxis(staggerLabels = TRUE)
n1$xAxis(rotateLabels=-90)
n1$setTemplate(afterScript='<style> svg text {font-size: 9px;}</style>')
return(n1)
})
require(rCharts)
runApp("~/Documents/NRT/scomms/Github/governance_ppt/app2")
shinyapps::deployApp("~/Documents/NRT/scomms/Github/governance_ppt/app2")
shinyapps::deployApp("~/Documents/NRT/scomms/Github/governance_ppt/app2")
shinyapps::deployApp("~/Documents/NRT/scomms/Github/governance_ppt/app2")
setwd("~/Documents/NRT/scomms/Github/governance_ppt")
shiny::runApp('app2')
shinyapps::deployApp("~/Documents/NRT/scomms/Github/governance_ppt/app2")
shinyapps::deployApp("~/Documents/NRT/scomms/Github/governance_ppt/app2")
shinyapps::deployApp("~/Documents/NRT/scomms/Github/governance_ppt/app2")
shiny::runApp('app2')
shiny::runApp('app2')
runApp("~/Documents/NRT/scomms/Github/governance_ppt/app2")
shiny::runApp('app2')
shinyapps::deployApp("~/Documents/NRT/scomms/Github/governance_ppt/app2")
shinyapps::deployApp("~/Documents/NRT/scomms/Github/governance_ppt/app2")
n1$lib()
shiny::runApp('app2')
n1$lib()
n1 <- nPlot(gov_score ~ conservancy, group = "gov_parameter", type = 'multiBarChart',
data = (subset(gov8, year==input$year)),
bounds = list( x = 200, y = 100, width = 750, height = 450),
tooltip="function(item){return item.conservancy +'\n' + item.year + '\n' + item.percentage}")
n1 <- nPlot(gov_score ~ conservancy, group = "gov_parameter", type = 'multiBarChart',
data = (subset(gov8, year=="2012")),
bounds = list( x = 200, y = 100, width = 750, height = 450),
tooltip="function(item){return item.conservancy +'\n' + item.year + '\n' + item.percentage}")
n1$lib
mychart
mychart <- renderChart2({
gov8 <- as.data.frame(gov9)
n1 <- nPlot(gov_score ~ conservancy, group = "gov_parameter", type = 'multiBarChart',
data = (subset(gov8, year=="input$year")),
bounds = list( x = 200, y = 100, width = 750, height = 450),
tooltip="function(item){return item.conservancy +'\n' + item.year + '\n' + item.percentage}")
#n1$set(dom = "mychart")
n1$chart(reduceXTicks = FALSE)
#n1$xAxis(staggerLabels = TRUE)
n1$xAxis(rotateLabels=-90)
n1$setTemplate(afterScript='<style> svg text {font-size: 12px;}</style>')
return(n1)
})
mychart
shinyapps::deployApp("~/Documents/NRT/scomms/Github/governance_ppt/app2")
shinyapps::deployApp("~/Documents/NRT/scomms/Github/governance_ppt/app2")
shinyapps::deployApp("~/Documents/NRT/scomms/Github/governance_ppt/app2")
shiny::runApp('app2')
shiny::runApp('app2')
shiny::runApp('app2')
shiny::runApp('app2')
library("shiny")
library("rCharts")
shinyServer(function(input, output) {
output$mychart <- renderChart({
gov8 <- as.data.frame(gov9)
n1 <- nPlot(gov_score ~ conservancy, group = "gov_parameter", type = 'multiBarChart',
data = (subset(gov8, year=="input$year")),
bounds = list( x = 200, y = 100, width = 750, height = 450),
tooltip="function(item){return item.conservancy +'\n' + item.year + '\n' + item.percentage}")
n1$set(dom = "mychart")
n1$chart(reduceXTicks = FALSE)
#n1$xAxis(staggerLabels = TRUE)
n1$xAxis(rotateLabels=-90)
n1$setTemplate(afterScript='<style> svg text {font-size: 12px;}</style>')
return(n1)
})
})
shiny::runApp('app2')
mychart
library("shiny")
shinyUI(pageWithSidebar(
headerPanel("Governance Scores by Year"),
sidebarPanel(
selectInput('year','Choose Year', c('2012', '2013', "2014"), "2012")
),
mainPanel(
showOutput("mychart", "nvd3")
)
)
)
shiny::runApp('app2')
n1 <- nPlot(gov_score ~ conservancy, group = "gov_parameter", type = 'multiBarChart',
data = (subset(gov8, year=="input$year"))
)
n1
n1 <- nPlot(gov_score ~ conservancy, group = "gov_parameter", type = 'multiBarChart',
data = (subset(gov8, year=="2012"))
)
n1
shiny::runApp('app2')
shiny::runApp('app2')
shiny::runApp('app2')
shiny::runApp('app2')
shiny::runApp('app2')
shinyapps::deployApp("~/Documents/NRT/scomms/Github/governance_ppt/app2")
shiny::runApp('app2')
shinyapps::deployApp("~/Documents/NRT/scomms/Github/governance_ppt/app2")
shiny::runApp('app2')
shinyapps::deployApp("~/Documents/NRT/scomms/Github/governance_ppt/app2")
shinyapps::deployApp("~/Documents/NRT/scomms/Github/governance_ppt/app2")
setwd("~/Documents/NRT/scomms/Github/governance_ppt")
#setwd("~/")
library(slidify)
library(slidifyLibraries)
library(knitr)
library(shiny)
library(rCharts)
author("slides")
runDeck() ### we need to run this because we're using a shiny application
runDeck() ### we need to run this because we're using a shiny application
https://dgohil.shinyapps.io/app2
runDeck() ### we need to run this because we're using a shiny application
runDeck() ### we need to run this because we're using a shiny application
